<?php

/**
 * @file
 * Redirect denied pages.
 */

/**
 * Implements hook_menu().
 */
function redirect_403_parent_menu() {
  $items = array();
  $items['r4032parent'] = array(
    'page callback' => 'r4032parent_redirect',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'title' => 'Access denied',
    'description' => 'You are not authorized to access this page.',
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function redirect_403_parent_form_system_site_information_settings_alter(&$form, &$form_state, $form_id) {

  $options = array('301' => '301 Moved Permanently', '302' => '302 Found');
  $form['error_page']['redirect_403_parent_default_redirect_code'] = array(
    '#type' => 'select',
    '#weight' => 9,
    '#title' => t("HTTP redirect code for 403 Access Denied"),
    '#description' => t('The redirect code to send. 301 responses may be cached by browsers and proxies, so 302 is normally the correct choice.'),
    '#options' => $options,
    '#default_value' => variable_get('redirect_403_parent_default_redirect_code', 302),
  );
  $form['error_page']['matching_paths'] = array(
    '#type' => 'fieldset',
    '#title' => t('403 Access Denied: Skip redirect for matching pages'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 10,
  );
  $form['error_page']['matching_paths']['redirect_403_parent_match_noredirect_pages'] = array(
    '#type' => 'textarea',
    '#title' => '<span class="element-invisible">' . t('Only the listed pages') . '</span>',
    '#default_value' => variable_get('redirect_403_parent_match_noredirect_pages', ''),
    '#description' => t('The paths listed here will redirect to the homepage.') . ' ' . t("Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", array('%blog' => 'blog', '%blog-wildcard' => 'blog/*', '%front' => '<front>')),
  );
  return system_settings_form($form);
}

/**
 * MENU_CALLBACK for /r4032parent
 *
 * Redirect anonymous users from 403 Access Denied pages to the /user/login page
 * with a message explaining that they must log in to view the requested page
 * and a query string parameter appended to the url to return after login.
 */
function r4032parent_redirect() {
  global $user, $language;
  if (user_is_anonymous()) {
    $page_match = FALSE;
    $pages = variable_get('redirect_403_parent_match_noredirect_pages', '');
    if ($pages) {
      // When on an access denied page, Drupal stores the original path in
      // $_GET['destination'] in drupal_deliver_html_page().
      // Convert the Drupal path to lowercase.
      $path = drupal_strtolower(drupal_get_path_alias($_GET['destination']));
      // Compare the lowercase internal and lowercase path alias (if any).
      $page_match = drupal_match_path($path, $pages);
      if ($path != $_GET['destination']) {
        $page_match = $page_match || drupal_match_path($_GET['destination'], $pages);
      }
    }

    $code = variable_get('redirect_403_parent_default_redirect_code', 302);

    // If on the pages to ignore list, redirect to home and stop processing current request.
    if ($page_match) {
      header('Location: ' . url('/', array('absolute' => TRUE)), TRUE, $code);
      drupal_exit();
    }

    // Handle redirection.
    // Get the aliased path for the destination, which is the node the user was trying to load.
    $path = drupal_get_path_alias($_GET['destination']);

    // Remove the last element in the path, which should give the parent path.
    $path_array = explode('/',$path);
    array_pop($path_array);
    $parent_path = implode('/',$path_array);

    // Redirect the page and stop processing current request.
    header('Location: ' . url($parent_path, array('absolute' => TRUE)), TRUE, $code);
    drupal_exit();
  }
}
